using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class KilroyVulnerability : Parryable
{
    [SerializeField] KilroyHealthBar healthBar;
    [SerializeField] Movement player1;
    public int lives = 5;
    public string state = "HAZARDOUS";
    Wait stateWait;
    Wait blinkWait;
    SpriteRenderer spi;
    AudioSource audioSource;
    [SerializeField] AudioClip hitSound;
    [SerializeField] DoorLockTrigger doorLockTrigger;
    [SerializeField] GameObject[] bossDoors;
    [SerializeField] float hazardTime = 9f;
    [SerializeField] float hazTranTime = 1.5f;
    [SerializeField] float vulTime = 1f;
    [SerializeField] float vulTranTime = 1f;
    [SerializeField] float invTime = 1.5f;
    /*
    HAZARDOUS - KILLS PLAYER ON COLLISION - RED
    HAZTRAN - TRANSITIONING TO VULNERABLE - BLINKING RED AND MAGENTA
    VULNERABLE - DAMAGES BOSS ON COLLISION - BLUE
    HIT - BOSS IS TEMPORARILY INVINCIBLE - FLASHING WHITE
    VULTRAN - TRANSITIONING TO HAZARDOUS - BLINKING BLUE AND MAGENTA
    DEAD - TBD
    */
    // Start is called before the first frame update
    void Reset()
    {
        for(int i = 0; i < bossDoors.Length; i++)
        {
            bossDoors[i].GetComponent<LockedDoor>().Unlock();
        }
        GetComponent<BossActivate>().Deactivate();
        Start();
        GetComponent<KilroyMovement>().Start();
    }
    void Die()
    {
        GetComponent<BoxCollider2D>().enabled = false;
        GetComponent<ParticleSystem>().Play();
        doorLockTrigger.enabled = false;
        Reset();
    }
    void Blink(Color initColor, Color otherColor)
    {
        blinkWait.Iterate();
        if(blinkWait.Complete())
        {
            if(spi.color == initColor)
            {
                spi.color = otherColor;
            }
            else
            {
                spi.color = initColor;
            }
        }
    }
    public override void Parry()
    {
        Damage();
    }
    void Damage()
    {
        lives--;
        GetComponent<Rigidbody2D>().AddForce(transform.up * 500f);
        state = "HIT";
        audioSource.PlayOneShot(hitSound, 1f);
        stateWait = new Wait(invTime);
        healthBar.Damage();
        if(lives <= 0) Die();

    }
    void Start()
    {
        lives = 5;
        state = "HAZARDOUS";
        audioSource = GetComponent<AudioSource>();
        spi = GetComponent<SpriteRenderer>();
        stateWait = new Wait(hazardTime);
        blinkWait = new Wait(0.1f);
    }

    // Update is called once per frame
    void Update()
    {
        if(player1.dead)
        {
            Reset();
        }
        if(state == "HAZARDOUS")
        {
            spi.color = Color.red;
            stateWait.Iterate();
            if(stateWait.Complete())
            {
                state = "HAZTRAN";
                stateWait = new Wait(hazTranTime);
            }
        }
        else if(state == "HAZTRAN")
        {
            Blink(Color.red, Color.magenta);
            stateWait.Iterate();
            if(stateWait.Complete())
            {
                state = "VULNERABLE";
                stateWait = new Wait(vulTime);
            }
        }
        else if(state == "VULNERABLE")
        {
            spi.color = Color.blue;
            stateWait.Iterate();
            if(stateWait.Complete())
            {
                state = "VULTRAN";
                stateWait = new Wait(vulTranTime);
            }
        }
        else if(state == "VULTRAN")
        {
            Blink(Color.blue, Color.magenta);
            stateWait.Iterate();
            if(stateWait.Complete())
            {
                state = "HAZARDOUS";
                stateWait = new Wait(hazardTime);
            }
        }
        else if(state == "HIT")
        {
            Blink(Color.red, Color.white);
            stateWait.Iterate();
            if(stateWait.Complete())
            {
                state = "HAZARDOUS";
                stateWait = new Wait(hazardTime);
            }
        }
    }
    void OnCollisionEnter2D(Collision2D collision)
    {
        if(collision.gameObject.tag == "Player")
        {
            if(state == "HAZARDOUS" || state == "HAZTRAN")
            {
                GetComponent<Rigidbody2D>().velocity = new Vector3(0, 0, 0);
                collision.gameObject.GetComponent<Movement>().Die();
                Reset();
                healthBar.Reset();
                GetComponent<BossActivate>().Deactivate();
            }
            else if(state == "VULNERABLE" || state == "VULTRAN")
            {
                Damage();
            }
            //Boss will act like a normal environment object on HIT.
        }
    }
}
